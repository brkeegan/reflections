How did viewing a diff between two versions of a file help you see the bug that
was introduced?

   It reduced the number of lines of code needed to be checked by highlighting only the sections which had changed. This is faster than checking every line of code.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

   Common mistakes could be identified which would be learned from. Code re-use would be easier as early versions of a program could be used and adapted later.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

   Pro: Only meaningful chnages would be saved (i.e. when something is added and working, when something is fixed, when new faetures are added, when something is forked)
   Con: Every change is saved which can make it difficult to tell when a feture was broken or an error first introduced. 

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

	Google Docs treat all files as independent. It has no knowledge of groupings.

How can you use the commands git log and git diff to view the history of files?

    Use git log to see all the history of commits along with comments. This will also provide us with the commit ID.
    Use git diff to compare two recent commits with there IDs to view the changes between commits.

How might using version control make you more confident to make changes that
could break something?

    It is a trivial task to restore an older version if bugs are introduced.
    More likely to take risks with code changes.
    Traditionally working code had very small incremental changes.

Now that you have your workspace set up, what do you want to try using Git for?

    Fill in your answer here
